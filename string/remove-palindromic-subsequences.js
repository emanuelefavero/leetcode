// * Remove Palindromic Subsequences

/*
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.
*/

/**
 * @param {string} s
 * @returns {number}
 */

// TIP: The string is made of only 'a' and 'b'. So, we can remove the entire string in one or two steps.

// O(n) time | O(1) space
function removePalindromeSub(s) {
  for (let i = 0, j = s.length - 1; i < j; i++, j--) {
    if (s[i] !== s[j]) return 2
  }

  return 1
}

// -------------------------
// SOLUTION 2

function removePalindromeSub2(s) {
  return s.split('').reverse().join('') === s ? 1 : 2
}

// -------------------------
// TESTS

// 1
console.log(removePalindromeSub('ababa')) // 1
// Explanation: s is already a palindrome, so its entirety can be removed in a single step.
console.log(removePalindromeSub('abb')) // 2
// Explanation: "abb" -> "bb" -> "". Remove palindromic subsequence "a" then "bb".

// 2
console.log(removePalindromeSub2('ababa')) // 1
console.log(removePalindromeSub2('abb')) // 2
